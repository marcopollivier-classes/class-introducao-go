################################################################################################################
Fundamentos de Golang
Vamos ver que Go não é apenas a linguagem do Google

Marco Ollivier
Software Engineer, OLX
marco.ollivier@olxbr.com
https://ollivier.com.br

@marcopollivier

################################################################################################################
* O que vamos ver nesse curso

* Dia 1
- Um pouco de história
- Variáveis e Tipos de dados
- Fundamentos do Go (Tipos de funções. Interfaces. Etc)
- Tratamento de erros

* Dia 2
- Ponteiros
- Concorrência 
- Construindo uma API

* Se der tempo...
- Go 2.0
- Mock 
- Testes

################################################################################################################
*  

.background img/marcoollivier.png

################################################################################################################
* Quem são vocês? 

- Qual o seu nome? 
- Qual o seu time? 
- Qual a sua expectativa?
- O que você mais gostaria de ver?

################################################################################################################
* Comunidade Go

.link https://invite.slack.golangbridge.org/ invite.slack.golangbridge.org

.link http://2019.gopherconbr.org gopherconbr.org

.link https://www.meetup.com/GopheRio/ meetup.com/GopheRio

################################################################################################################
* Dia 1

################################################################################################################
* O que Go não é? 

################################################################################################################
* Go não é apenas um C com vidro elétrico

Existe influência da herança do C, mas Go vai além...

"(Go) ... apresenta e adapta boas ideias de várias outras linaguagens, ao mesmo tempo que evita funcionalidades que resultam em complexidade e em códigos não confiáveis."

- Recursos novos e eficientes de concorrência 
- Recursos para abstração de dados e OO são muito bons 
- Gerenciamento de memória automático (GC)

################################################################################################################
* Mas herdou muita coisa legal (C para o século XXI)

- Sintaxe de suas expressões
- Intruções de conxtrole de fluxo
- Tipos básicos de dados
- Passagem de parâmetro por valor
- Ponteiros
- Geração de código de máquina eficiente

################################################################################################################
* Case Everest... sim, o Everest de Accounts

################################################################################################################
* Outras influências 

- Modula-2 e Oberon-2: conceito de pacotes
- CSP (linguagem acadêmica): fundamentos de concorrência

################################################################################################################
* 
.image img/ancestors.png

################################################################################################################
* Go não é apenas para CLI

- Go é muito bom para criação de CLIs 
- Backend
- Aplicações Móveis 
- ML 
- IoT

################################################################################################################
* Cases de muito sucesso

- Docker
- Kubernetes 
- Runner Gitlab CI 
- Traefik

################################################################################################################ 
* Go não é só uma linguagem do Google

- Go nasceu com um propósito, digamos, modesto
- A linguagem escalou e a comunidade ganhou força
- Generics
- Tratamento de erros
- Gerenciamento de dependência

################################################################################################################
* Linha do tempo 

- Criada em 2007 por Robert Griesemer, Rob Pike e Ken Thompson

- Lançada em 2009

- Go 1 (Março 2012)
- Go 1.1 (Maio 2013)
- (...)
- Go 1.11 (Agosto 2018)
- Go 1.12 (Fevereiro 2019)

################################################################################################################ 
* "Go é uma linguagem de programação de código aberto que facilita a criação de softwares simples, confiáveis e eficientes"

################################################################################################################ 
* Go não é só do Google!!!!

################################################################################################################ 
* Go não é só do Google!!!!

- Linguagens nascem com filosofias com viés de seus criadores
- Normalmente também é influenciado por deficiências de outras Linguagens

################################################################################################################ 
* Go não é só do Google!!!!

- Go nasceu por conta da complexidade de códigos de soluções do Google

Convenhamos que não é só o Google que tem problemas com complexidade de soluções

Então...

################################################################################################################ 
* Go não é só do Google!!!!

################################################################################################################ 
* Com a palavra: Ryan Dahl, criador do Node.JS

"[...] I think Node is not the best system to build a massive server web. I would use Go for that. And honestly, that’s the reason why I left Node. It was the realization that: oh, actually, this is not the best server-side system ever."

--

"[...] eu acho que o Node não é o melhor sistema para construir um servidor web massivo. Eu usaria o Go para isso. E honestamente, essa é a razão pela qual eu deixei o Node. Foi a percepção de que: oh, na verdade, não é o melhor sistema do lado do servidor. "

.link https://edneypitta.com/on-node-go-concurrency/ https://edneypitta.com/on-node-go-concurrency/

################################################################################################################ 
* Go não é só do Google!!!!
 
################################################################################################################ 
* Vamos falar logo de pontos fracos

- Generics
- Polimorfismo
- Regex (marromenos)
- Tratamento atual de erros 

################################################################################################################ 
* Pontos fortes

- Tipagem forte e estática
- Inferência de tipo
- Compilada
- GC
- Concorrência
- Rápida
- Simples
- Até mesmo divertida

################################################################################################################ 
* Já falei que Go não é só do o Google? 

################################################################################################################ 
* Paradigma

Go é uma linguagem multiparadigma

- O.O. 
- Procedural
- funcional

################################################################################################################ 
* Chega de papo furado

################################################################################################################ 
* Instalando GO

.link https://medium.com/responsive-br/gerencie-suas-versoes-go-com-gvm-69bf66a62db4
 
################################################################################################################ 
* Ambiente de desenvolvimento

- Goland $$$
- VS Code + Golang plugin
- VIM 

################################################################################################################ 
* GOPATH e GOROOT

- GOROOT
    /Users/marco.ollivier/.gvm/gos/go1.12
- GOPATH    
    /Users/marco.ollivier/workspace-go

################################################################################################################ 
* A polêmica do ambiente Go e a versão 1.11

- src
- bin
- pkg 

################################################################################################################ 
* 

.background img/pacote.png

################################################################################################################ 
* Go na OLX 

################################################################################################################ 
* Primeiros passos

################################################################################################################ 
* Hello, World!

Um clássico... começar pelo Hello, World!

.play hello/main.go

################################################################################################################ 
* Exercício - Olá, mundo

- Crie um diretório no caminho 

    ~/workspace-go/src/github.com/<seuusuario>/olx-inverno-go/cmd/server 

- Crie um arquivo main.go e escreva o código

.code hello/main.go

- Execute o comando 

    $ go run main.go

################################################################################################################ 
* Exercício - Olá, mundo

- Execute o comando 

    $ go build main.go

O que aconteceu?

################################################################################################################ 
* Exercício - Olá, mundo - Resultado esperado

.play hello/main.go

################################################################################################################ 
* Hello, World ++

Vamos fazer um Hello, World com parâmetros

.code helloParametes/main.go 

    $ go run helloParametes/main.go <Seu Nome>


################################################################################################################ 
* Pacote fmt

O pacote fmt implementa I/O formatado

- Análogo ao printf e scanf do C

.code hello/main.go

.link https://golang.org/pkg/fmt/

################################################################################################################ 
* Pacotes

- Lower case
- De preferência uma única palavra 
- se necessário: algo parecido com um camelCase
- nunca usar a_a_a
- Não se preocupe com nomes repetidos
- Possibilidade de 

################################################################################################################ 
* Tipos de import

.code hello/main.go

.code helloParametes/main.go

################################################################################################################ 
* Package main e main function

Define um ponto de entrada (Entrypoint)

.code hello/main.go

################################################################################################################ 
* Variáveis

Go permite declarar variáveis de algumas formas 

Lembrando que as variáveis em Go tem: 

- Tipagem forte 
- Tipagem estática
- Inferência de tipo

    var nome string

    var valor1, valor2 int

    var nome string = "Marco" //lint reclamaria

    var valor1, valor2 int = 1, 2 //lint reclamaria

    var nome = "Marco" //inferindo

    var valor1, valor2 = 1, 2 //inferindo

    nome := marco //abreviada

################################################################################################################ 
* Variáveis não utilizadas 

Variáveis não utilizadas geram erro de compilação

    func main() {
        var x string
    }

################################################################################################################ 
* Constantes

Acaba se comportando de forma parecida

    const aceleracaoGravitacional float64

    const aceleracaoGravitacional float64 = 9,80665

################################################################################################################
* Go fmt

################################################################################################################ 
* Exercício - Variáveis e constantes

Faça as declarações abaixo e as imprima com o fmt.Println

- Defina seu CPF em uma constante 
- Seu nome em uma variável com declaração explícita de tipo
- o nome do seu pai com inferência simples 
- o nome da sua mãe com inferência abreviada

################################################################################################################ 
* Exercício - Variáveis e constantes - Resultado esperado

.play variaveis/main.go

################################################################################################################ 
* Laços de repetição

Em Go não temos o conceito de While. Então tratamos laços de 3 maneiras 

################################################################################################################ 
* Laços de repetição - única condição

	var i = 1
	for i <= 3 {
		fmt.Println(i)
		i++
	}

################################################################################################################ 
* Laços de repetição - tradicional

	for j := 1; j < 9; j++ {
		fmt.Println(j)
	}

################################################################################################################ 
* Laços de repetição - break

	var k = 1
	for {
		k++

		if k == 9 {
			break
		}
	}

################################################################################################################ 
* Laços de repetição

.play loop/main.go /^func main/,/^}/


################################################################################################################ 
* if / else

Um caso interessante de mostrar

Variável apenas no escopo do if (num)

    if num := 9; num < 0 {
        fmt.Println(num, "é negativo")

    } else if num < 10 {
        fmt.Println(num, "tem 1 dígito")

    } else {
        fmt.Println(num, "tem vários dígitos")

    }

################################################################################################################ 
* Funções

################################################################################################################ 
* Funções

    func hello() {
        ...
    }
    
    func hello(nome string) {
        ...
    }
    
    func hello(nome string) string {
        ...
    }

################################################################################################################ 
* Funções

Isso

    func hello(nome string) string {
        return "Hello, " + nome
    }

é diferente disso

    func Hello(nome string) string {
        return "Hello, " + nome
    }

################################################################################################################ 
* Funções - Multiplos retornos

    func valores() (int, int) {
        return 3, 1
    }

    ... 

    a, b := valores()

Também pode nomear... escopo da variável apenas dentro da função

    func valores() (ret1 int, ret2 int) {
        ret1 = 3
        ret1 = 1
        
        return ret1, ret2
    }
    
################################################################################################################ 
* Funções - Multiplos retornos

Blank identifier

    func valores() (int, int) {
        return 3, 1
    }

    ... 

    _, b := valores()

################################################################################################################ 
* Defer

.play exemploDefer/main.go

################################################################################################################ 
* Exercício - Funções - Resultado esperado

Criar uma função que espere um nome como parâmetro e retorne a frase: olá, <nome>

################################################################################################################ 
* Exercício - Funções - Resultado esperado

.play funcoes/main.go

################################################################################################################ 
* Structs

################################################################################################################ 
* Structs

- Basicamente é uma coleção de campos tipados. 
- Podemos fazer uma relação com uma Classe. 

    type person struct { 
        name string
    }

    ... 

    person{name: "Marco"}
    
    ...

    person{"Marco"}
    
################################################################################################################    
* Structs 

    type person struct { 
        name string
    }

    func main() {

        fmt.Print(person{name: "Marco"})

    }
    
################################################################################################################ 
* Structs

- Suporte limitado a O.O.
- Sem suporte a herança
- Com suporte a composição 

    type address struct {
        street string
    }

    type person struct {
        name string
        address address 
    }

    func main() {
        
        a := address{"Rua do Catete"}
        p := person{name: "Fred", address: a}
        fmt.Println(p) 

        //{Fred {Rua do Catete}}

    }

################################################################################################################ 
* Structs - Métodos

    type retangulo struct { 
        largura, altura int
    }

    func (ret retangulo) area() int {
        return ret.largura * ret.altura
    }

    func main() {
        var retanguloEquilatero = retangulo{altura: 2, largura: 2}
        area := retanguloEquilatero.area()

        fmt.Println(area) //4
    }


################################################################################################################ 
* Exercício - Structs 

É possível derivar uma palavra por meio do seu prefixo + radical + sufixo 

- Crie uma Struct que contenha esses elementos separados 
- Crie um método que imprima a palavra anoitecer

Prefixo: A
Radical: noite 
Sufixo: cer

################################################################################################################ 
* Exercício - Structs - Resultado esperado

.play structs/main.go

################################################################################################################ 
* Interface

    type geometria interface {
        area() float64
        perim() float64
    }

################################################################################################################ 
* Interface

    func (q quadrado) area() float64 {
        return q.largura * q.altura
    }
    func (q quadrado) perim() float64 {
        return 2*q.largura + 2*q.altura
    }

    func (c circulo) area() float64 {
        return math.Pi * c.raio * c.raio
    }
    func (c circulo) perim() float64 {
        return 2 * math.Pi * c.raio
    }

################################################################################################################ 
* Interface

    func medir(g geometria) {
        fmt.Println(g)
        fmt.Println(g.area())
        fmt.Println(g.perim())
    }

    func main() {
        q := quadrado{largura: 3, altura: 4}
        c := circulo{raio: 5}

        medir(q)
        medir(c)
    }

################################################################################################################ 
* Interface

Caso você não implemente uma das funções...

    ./prog.go:42:10: cannot use c (type círculo) as type geometria in argument to medir: círculo does not implement geometria (missing perim method)

################################################################################################################ 
* Interface

.play exemploInterface/main.go /^func main/,/^}/

################################################################################################################
* Exercício - Interface

Vamos implementar e adicionar outras figuras geométricas ao modelo anterior

################################################################################################################
* Error handling

Vamos começar dizendo que você pode omitir erros, mas não é indicado

    import "fmt"
    import "strconv"

    func main() {
        b, _ := strconv.ParseBool("true")
        fmt.Println(b)
    }

################################################################################################################
* Error handling

Atualmente nós tratamos erro com if's e talvez você ache isso muito estranho

    import "fmt"
    import "strconv"

    func main() {
        b, _ := strconv.ParseBool("true")
        fmt.Println(b)
    }

################################################################################################################
* Error handling

Atualmente nós tratamos erro com if's e talvez você ache isso muito estranho

    func main() {
        b, err := strconv.ParseBool("true")
        
        if err != nil {
            fmt.Println(err)
        }
        
        fmt.Println(b)
    }

################################################################################################################
* Dia 2

################################################################################################################
* Ponteiros

################################################################################################################
* Concorrência

################################################################################################################
* Web Service 

################################################################################################################ 
* Livro: A Linguagem de Programação Go 

.image img/refBook.jpg

* Referências Go

.link https://golang.org/project/ Go project
.link https://golang.org/doc/effective_go.html Effective Go
.link https://blog.golang.org/ The Go Blog


* Referências externas e artigos

.link https://eltonminetto.net/post/2019-06-01-object-calisthenics-golang/ Object Calisthenics em Golang
.link http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/ 50 shades of Go 
.link https://gobyexample.com Go by Example

* Referências extras 

.link http://felipequadros.com/programa%C3%A7%C3%A3o/b%C3%A1sico/iniciante/geral/teoria/2016/06/05/tipagem-fraca-forte-est%C3%A1tica-din%C3%A2mica-e-inferencia-de-tipo/ Tipagens


